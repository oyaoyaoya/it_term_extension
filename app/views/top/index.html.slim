.hoge
  p
    | 本カリキュラムでは、良いコードを書くために必要な知識を学習します。今後、複数人で開発するときに自分以外の人にコードを短時間で理解してもらうために良いコードの書き方を学習していきましょう。
  h2
    | 本カリキュラムの目的
  ul
    li
      | 他の人が理解しやすいコードの書き方を学ぶ
    li
      | コードの読み間違い、書き間違いをなくすコードの書き方を学ぶ
    li
      | バグの少ないコードの書き方を学ぶ
  p
    | cd
  h1
    | 良いコードとは何かを学習しよう
  p
    | 「良いコードを書く」と言われてもどのようなコードが良いコードなのかイメージできないと思います。良いコードとはどのようなものなのかを学習した後に、良いコードの書き方を学習しましょう。
  h2
    | 良いコードとは
  p
    | 良いコードとは、読みやすいコードのことです。読みやすいコードは、「他の人が短時間で理解できるように書かれている」ことを指します。
    br
    |  読みやすいコードを書くことは、一緒に開発するチームのためだけではなく、自分のためにも重要です。
  p
    | 今後複数人で開発するにあたって、コードを書く時間よりもコードを読む時間の方が多くなります。複数人で開発をしていると他の人の書いたコードを読むことも増えます。コードの理解しやすさは、プログラマが大切にすべき要素の1つです。
    br
    |  これから良いコードを書くための知識を身につけていきましょう。
  h2
    | 良いコードの要素
  p
    | 良いコードの要素は以下のようになります。
  ul
    li
      | 命名規則
    li
      | コードのレイアウト
    li
      | コメント
  h3
    | 命名規則
  p
    | 変数やメソッドの名前はプログラムの挙動に影響しないため、好きなように命名することができます。変数であれば、どのようなデータを格納するのか、メソッドであれば、どのような処理をするのかを明確に伝えられるような命名を心がけましょう。
  h4
    | 命名規則のポイント
  p
    | 良い命名を行うポイントは以下のようになります。
  ul
    li
      | 明確で具体的な単語を選ぶ
    li
      | 汎用的な名前を避ける
    li
      | 名前に情報を含める
    li
      | 誤解されない名前を使う
    li
      | 他の開発者の期待に合わせる
  h4
    | 明確で具体的な単語を選ぶ
  p
    | メソッド名は他の開発者がひと目で意味を理解できるようにしましょう。
    br
    |  例えば、 「取得する」という意味で
    code
      | get
    |  を使うことは多いですが、「Webページを取得する」のように目的が決まっている場合は
    code
      | get_page
    |  のようにしたほうが良いです。
  .code-frame[data-lang="ruby"]
    .code-lang
      span.bold
        | 例
    table.highlighttable
      tr
        td.linenos
          .linenodiv
            pre
              |  1 2 3 4 5 6 7 8 9 10 11
        td.code
          .highlight
            pre
              span.c1
                | # Webページを取得するメソッド
              span.c1
                | # bad
              span.k
                | def
              span.nf
                | get
              span.p
                | (
              span.n
                | url
              span.p
                | )
              span.c1
                | # ...
              span.k
                | end
              span.c1
                | # good
              span.k
                | def
              span.nf
                | get_page
              span.p
                | (
              span.n
                | url
              span.p
                | )
              span.c1
                | # ...
              span.k
                | end
  h4
    | 汎用的な名前を避ける
  p
    | メソッドや繰り返しの途中で一時的な変数を保存しておきたいことがよくあります。この時に
    code
      | tmp
    | （一時的なという意味） のような汎用的な変数名を使ってしまうと可読性が下がります。
    br
    |  可読性を損なわないために、「計算途中の合計値」を保存しておきたい場合は
    code
      | sum
    |  という名前を使ったほうが良いです。
  .code-frame[data-lang="ruby"]
    .code-lang
      span.bold
        | 例
    table.highlighttable
      tr
        td.linenos
          .linenodiv
            pre
              |  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
        td.code
          .highlight
            pre
              span.c1
                | # 平均を計算するメソッド
              span.c1
                | # bad
              span.k
                | def
              span.nf
                | average
              span.p
                | (
              span.n
                | list
              span.p
                | )
              span.n
                | tmp
              span.o
                | =
              span.mi
                | 0
              span.o
                | .
              span.mi
                | 0
              span.n
                | list
              span.o
                | .
              span.n
                | each
              span.p
                | {
              span.o
                | |
              span.n
                | item
              span.o
                | |
              span.n
                | tmp
              span.o
                | +=
              span.n
                | item
              span.p
                | }
              span.k
                | return
              span.n
                | tmp
              span.o
                | /
              span.n
                | list
              span.o
                | .
              span.n
                | count
              span.k
                | end
              span.c1
                | # good
              span.k
                | def
              span.nf
                | average
              span.p
                | (
              span.n
                | list
              span.p
                | )
              span.n
                | sum
              span.o
                | =
              span.mi
                | 0
              span.o
                | .
              span.mi
                | 0
              span.n
                | list
              span.o
                | .
              span.n
                | each
              span.p
                | {
              span.o
                | |
              span.n
                | item
              span.o
                | |
              span.n
                | sum
              span.o
                | +=
              span.n
                | item
              span.p
                | }
              span.k
                | return
              span.n
                | sum
              span.o
                | /
              span.n
                | list
              span.o
                | .
              span.n
                | count
              span.k
                | end
  h4
    | 名前に情報を含める
  p
    | 変数の値を大文字や小文字にするなど、あるルールに沿って変換して新しい変数として利用したい場合を想定します。
    br
    |  その場合は変数名に「大文字にされた」（変換された）という意味をもたせることで、何のための変数かが伝わりやすくなります。
  .code-frame[data-lang="ruby"]
    .code-lang
      span.bold
        | 例
    table.highlighttable
      tr
        td.linenos
          .linenodiv
            pre
              | 1 2
        td.code
          .highlight
            pre
              span.n
                | user_name
              span.o
                | =
              span.s1
                | 'Yamada Taro'
              span.n
                | uppercased_user_name
              span.o
                | =
              span.n
                | user_name
              span.o
                | .
              span.n
                | upcase
  h4
    | 誤解されない名前を使う
  p
    | 変数名やメソッド名はほとんどの場合、英単語を使います。使用する英単語が複数の意味を持っていたり、ニュアンスが異なる意味をもっている場合は注意しましょう。
    br
    |  例えば、以下の
    code
      | read_books
    |  というメソッドは「読んだことのある本」なのか「本を読む=既読にする」なのかがすぐには理解できません。
    br
    |  そのような場合には、別の単語に変えるか、名前を長くして詳しく説明しましょう。
  .code-frame[data-lang="ruby"]
    .code-lang
      span.bold
        | 例
    table.highlighttable
      tr
        td.linenos
          .linenodiv
            pre
              | 1 2 3 4 5
        td.code
          .highlight
            pre
              span.c1
                | # bad
              span.vi
                | @user
              span.o
                | .
              span.n
                | read_books
              span.c1
                | # 本を読む or 読んだことのある本
              span.c1
                | # good
              span.vi
                | @user
              span.o
                | .
              span.n
                | already_read_books
              span.c1
                | # 読んだことのある本
  p
    code
      | already_read_books
    | と定義してあげれば、すぐに「読んだことのある本」だということがわかります。名前をつけるときは、
    code
      | 他の意味と間違えられることはないか
    | 　と何度も自問自答すると誤解されにくい名前をつけることができます。
  h4
    | 他の開発者の期待に合わせる
  p
    | 開発に慣れると、これはこのような動作をするはずという「期待する動作」がつかめてきます。そのような「期待」を他の開発者も持っています。その「期待」に沿うことで冗長な記述を省略できたり、レビューが効率的になりチーム全体の開発スピードが上がります。このような「期待」を裏切らないコードを書きましょう。
    br
    |  例えば、以下のように「ユーザーが持っている本」を配列で返す
    code
      | books
    |  というメソッドがあるとします。あるユーザーが本を持っていない場合に
    code
      | nil
    |  を返してしまうと、本を持っていない場合は空の配列になっていると思っている開発者の「期待」からは外れてしまいます。
    br
    |  他の開発者が、
    code
      | @user2.books.each { ... }
    |  とした時にてエラーが出て迷惑をかけてしまします。
  .code-frame[data-lang="ruby"]
    .code-lang
      span.bold
        | 例
    table.highlighttable
      tr
        td.linenos
          .linenodiv
            pre
              | 1 2 3 4 5 6 7
        td.code
          .highlight
            pre
              span.vi
                | @user1
              span.o
                | .
              span.n
                | books
              span.o
                | =>
              span.o
                | [
              span.s1
                | 'よくわかるRuby'
              span.p
                | ,
              span.s1
                | 'JavaScript入門'
              span.o
                | ]
              span.c1
                | # bad
              span.vi
                | @user2
              span.o
                | .
              span.n
                | books
              span.o
                | =>
              span.kp
                | nil
              span.c1
                | # good
              span.vi
                | @user2
              span.o
                | .
              span.n
                | books
              span.o
                | =>
              span.o
                | []
  h4
    | よく使う英単語
  p
    | プログラミングで使う英単語はある程度決まっています。また、一般的な英単語に加えて特別な意味が含まれていることがあります。一般的な英単語では同義語でも、プログラミング中で特別な意味を持つこともあるので注意しましょう。
  table
    thead
      tr
        th
          | 英単語
        th
          | 説明
        th
          | 具体例
    tbody
      tr
        td
          | set
        td
          | 主にクラスのプロパティに値を代入する場合に用いる。
        td
          | set_projects
      tr
        td
          | add
        td
          | 追加。配列・リストにデータ、オブジェクトを加えるケースが多い。数値の加算もこちらを用いる。
        td
          | add_user_nickname
      tr
        td
          | render
        td
          | 画像などを編集した結果を表示したり、項目を HTML などに変換した上で返す。
        td
          | render_html
      tr
        td
          | import
        td
          | ファイルを対応形式に変換して読み込む。
        td
          | import_projects_show_file
      tr
        td
          | fetch
        td
          | （別の場所から）情報を取ってくる。CPU がメモリから命令コードを取ってくることを指す場合もあるが、データベースから情報を取得することを指すことが多い。
        td
          | fetch_account
      tr
        td
          | modify
        td
          | 部分的に修正する。edit より用途が広く、データのメインとなる箇所の変更はもちろん、それ以外の小さな変更であっても modify と表せる。
        td
          | modify_indentation
      tr
        td
          | apply
        td
          | 適用する。当てはめる。
        td
          | apply_projects_css
      tr
        td
          | remove
        td
          | データをリストや閲覧・アクセス可能な場所から取り除く。アクセス権のない領域への移動。取り除かれたデータが消滅するとは限らず、元に戻せる可能性がある。
        td
          | remove_user_data
      tr
        td
          | is～
        td
          | オブジェクトが特定の型、状態であるか調べて true/false を返す。
        td
          | is　isChecked
  p
    | 他にもよく使われる英語があるので興味がある方は調べてみてください。
  h3
    | コードのレイアウト
  p
    | コードのレイアウトはプログラムの挙動に影響することはほとんどありません。コードのレイアウトを整えることで可読性を大幅に上げることができます。
  h4
    | コードのレイアウトのポイント
  p
    | コードのレイアウトを整えるポイントは以下です。
  ul
    li
      | 整列
    li
      | 一貫性
    li
      | ブロック化
  h4
    | 整列
  p
    | 整列とは、縦の位置を揃えることです。スペースを使って
    code
      | =（イコール）
    | などの位置を揃えることで可読性を高めることができます。
  .code-frame[data-lang="ruby"]
    .code-lang
      span.bold
        | 例
    table.highlighttable
      tr
        td.linenos
          .linenodiv
            pre
              | 1 2 3 4 5 6 7 8 9
        td.code
          .highlight
            pre
              span.c1
                | # bad
              span.nb
                | name
              span.o
                | =
              span.n
                | params
              span.o
                | [
              span.ss
                | :name
              span.o
                | ]
              span.o
                | ||
              span.s1
                | 'No name'
              span.n
                | age
              span.o
                | =
              span.n
                | params
              span.o
                | [
              span.ss
                | :age
              span.o
                | ]
              span.o
                | ||
              span.mi
                | 30
              span.n
                | prefecture
              span.o
                | =
              span.n
                | params
              span.o
                | [
              span.ss
                | :prefecture
              span.o
                | ]
              span.o
                | ||
              span.s1
                | 'Tokyo'
              span.c1
                | # good
              span.nb
                | name
              span.o
                | =
              span.n
                | params
              span.o
                | [
              span.ss
                | :name
              span.o
                | ]
              span.o
                | ||
              span.s1
                | 'No name'
              span.n
                | age
              span.o
                | =
              span.n
                | params
              span.o
                | [
              span.ss
                | :age
              span.o
                | ]
              span.o
                | ||
              span.mi
                | 30
              span.n
                | prefecture
              span.o
                | =
              span.n
                | params
              span.o
                | [
              span.ss
                | :prefecture
              span.o
                | ]
              span.o
                | ||
              span.s1
                | 'Tokyo'
  h4
    | 一貫性
  p
    | 一貫性とは、似たようなコードのフォーマットを揃えることです。コードの中に似たような構造が現れたら、同じようなフォーマットに統一できないか考えてみましょう。
  .code-frame[data-lang="ruby"]
    .code-lang
      span.bold
        | 例
    table.highlighttable
      tr
        td.linenos
          .linenodiv
            pre
              |  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24

              p
                | データベースに保存されたデータを画面に表示できるようにしましょう
              h1
                | ダイジェスト動画
              h3
                i.icon.attention
                |  ダイジェスト動画は、本章の中での作業マークの部分でどのような作業をし、どのような結果になれば良いかのみを解説する動画です。
              p
                | ※カリキュラム自体の解説はしておりませんので、ご了承ください。
                br
                |  作業マークがある箇所で何をすれば良いかわからない、結果が正しいか確認したいといった場合に、ダイジェスト動画を御覧ください。
                br
                iframe[width="420" height="315" src="https://www.youtube.com/embed/Rj6R-8EEUo0" frameborder="0" allowfullscreen]
                br
                iframe[width="420" height="315" src="https://www.youtube.com/embed/gkZfFwbScfI" frameborder="0" allowfullscreen]
              h1
                | ビューにデータを受け渡す
              p
                | Railsでの処理が
                strong
                  | ルーティング→コントローラ→ビューの順番
                | で進むことは以前に学習しました。その際にコントローラの役割を、リクエストに応じたビューをレスポンスとして返すことだと説明しました。実はそれだけでなく、
                strong
                  | コントローラのアクションの中で何らかの処理を行うことも可能
                | なのです。本章ではその中でも最も良く利用する、コントローラからビューにデータを受け渡しそのデータをビューで表示する、という処理を実装します。
              p
                img[src="https://tech-master.s3.amazonaws.com/uploads/curriculums/images/Rails1-4/001.png" alt="ビューにデータを受け渡す"]
              h2
                | コントローラで受け取ったデータをビューで表示しよう
              p
                | 前章では、テーブルから情報を引き出す方法を学びました。本項では、コントローラ内のアクションで定義した情報を見た目に反映させる方法を学びます。
              h3
                | コントローラに、ビューに表示したい情報を定義する
              p
                strong
                  | コントローラのアクション内に定義したインスタンス変数(@つきの名前の変数)は、そのアクションが表示するビュー内で利用することができます。
              p
                | 早速、
                code
                  | tweets_controller
                | の
                code
                  | indexアクション
                | と
                code
                  | index.html.erb
                | を利用して確認してみましょう。
              h3
                i.icon.pen
                |  tweets_controller.rbを以下のように編集しましょう
              ul.filetree
                li.t-folder
                  |  app
                  ul
                    li.t-folder
                      |  controllers
                      ul
                        li.t-file
                          |  tweets_controller.rb
              .code-frame[data-lang="ruby"]
                .code-lang
                  span.bold
                    | app/controlers/tweets_controller.rb
                table.highlighttable
                  tr
                    td.linenos
                      .linenodiv
                        pre
                          | 1 2 3 4 5 6 7
                    td.code
                      .highlight
                        pre
                          span.k
                            | class
                          span.nc
                            | TweetsController
                          span.o
                            | <
                          span.no
                            | ApplicationController
                          span.k
                            | def
                          span.nf
                            | index
                          span.hll
                            span.vi
                              | @tweet
                            span.o
                              | =
                            span.s2
                              | "プログラミングなう"
                          span.k
                            | end
                          span.k
                            | end
              p
                curriculum-checkbox[data-id="301"]
              p
                curriculum-checkbox[data-id="302"]
              h3
                | 受け取ったデータをビューで表示する
              p
                | 先ほどの編集によってビューに
                code
                  | @tweet = "プログラミングなう"
                | という情報が渡されたはずです。続いて、ビューに渡されたデータを実際に表示します。
              h3
                i#term_309.icon.information
                |  インスタンス変数の呼び出し範囲
              p
                | 先ほどの作業で、インスタンス変数を
                code
                  | tweets_controller
                | の
                code
                  | index
                | アクションの中で定義しました。その場合このインスタンス変数は、
                code
                  | index
                | アクションに対応したビューである
                code
                  | app/views/tweets/index.html.erb
                | の中で利用できます。
              p
                | Railsの見た目用のファイルである
                code
                  | erb
                | ファイルの中でRubyのコードを利用する場合、
                code
                  | <%= %>
                | という記述で囲います。
              h3
                i.icon.pen
                |  index.html.erbを以下のように編集しましょう
              ul.filetree
                li.t-folder
                  |  app
                  ul
                    li.t-folder
                      |  views
                      ul
                        li.t-folder
                          |  tweets
                          ul
                            li.t-file
                              |  index.html.erb
              .code-frame[data-lang="html"]
                .code-lang
                  span.bold
                    | app/views/tweets/index.html.erb
                table.highlighttable
                  tr
                    td.linenos
                      .linenodiv
                        pre
                          | 1
                    td.code
                      .highlight
                        pre
                          span.hll
                            span.err
                              | <
                            | %= @tweet %>
              p
                curriculum-checkbox[data-id="303"]
              p
                | ビューで、定義した
                strong
                  | 変数を使用するためには
                  code
                    | <%= %>
                  | で変数名を囲んであげる
                | 必要があります。
                code
                  | <%= %>
                | の中のrubyコードは、ビューをレスポンスとして返すまでに実行されて、最終的にはHTMLになります。
              p
                | 繰り返しますが、
                code
                  | <%= %>
                | を利用するにはビューの拡張子が
                code
                  | .erb
                | になっている必要があります。
              .code-frame[data-lang="html"]
                .code-lang
                  span.bold
                    | viewファイル
                table.highlighttable
                  tr
                    td.linenos
                      .linenodiv
                        pre
                          | 1
                    td.code
                      .highlight
                        pre
                          span.err
                            | <
                          | %= 変数名 %> #変数をビュー内で使用
              p
                | これでビューにデータを受け渡し、表示させるということができているはずです。そこで、実際にサーバーを立ち上げて確認してみましょう。
              h3
                i.icon.pen
                |  ターミナルで下記のコマンドを実行しましょう
              .code-frame[data-lang="bash"]
                .code-lang
                  span.bold
                    | ターミナル
                table.highlighttable
                  tr
                    td.linenos
                      .linenodiv
                        pre
                          | 1 2 3 4 5
                    td.code
                      .highlight
                        pre
                          span.nv
                            | $
                          span.nb
                            | cd
                          |  ~/projects/pictweet
                          span.c
                            | # アプリケーションのあるディレクトリに移動
                          span.nv
                            | $
                          | rails s
                          span.c
                            | # テストサーバーを起動
              h3
                i.icon.pen
                |  ブラウザで下記のURLにアクセスしましょう
              p
                | 下記のURLにアクセスすると、下の画像のような状態になるはずです。
              h4
                a[href="http://localhost:3000/tweets" target="_blank"]
                  | http://localhost:3000/tweets
              p
                img[src="https://tech-master.s3.amazonaws.com/uploads/curriculums/images/Rails1-4/programming_now.png" alt="プログラミングなう"]
              p
                curriculum-checkbox[data-id="304"]
              p
                curriculum-checkbox[data-id="305"]
              h1
                | モデルを利用してデータを表示する
              p
                | 前の項では、コントローラからビューにデータを受け渡して、表示するということを学びました。本項では前章で学習したモデルを利用して、アクションの中でデータベースの値を取り出しビューへ受け渡し、その情報を表示させます。
              h2
                | データベースの値をビューに表示しよう
              h3
                | tweetsテーブルのレコードの情報をビューに表示
              p
                | まずは、1つのtweetの情報をデータベースから取ってきて、ビューに表示してみましょう。
              p
                | コントローラにて、データベースからひとつのtweetの情報を取ってきます。
              h3
                i.icon.pen
                |  tweets_controller.rbを以下のように編集しましょう
              ul.filetree
                li.t-folder
                  |  app
                  ul
                    li.t-folder
                      |  controllers
                      ul
                        li.t-file
                          |  tweets_controller.rb
              .code-frame[data-lang="ruby"]
                .code-lang
                  span.bold
                    | app/controlers/tweets_controller.rb
                table.highlighttable
                  tr
                    td.linenos
                      .linenodiv
                        pre
                          | 1 2 3 4 5 6 7
                    td.code
                      .highlight
                        pre
                          span.k
                            | class
                          span.nc
                            | TweetsController
                          span.o
                            | <
                          span.no
                            | ApplicationController
                          span.k
                            | def
                          span.nf
                            | index
                          span.hll
                            span.vi
                              | @tweet
                            span.o
                              | =
                            span.no
                              | Tweet
                            span.o
                              | .
                            span.n
                              | find
                            span.p
                              | (
                            span.mi
                              | 3
                            span.p
                              | )
                          span.k
                            | end
                          span.k
                            | end
              p
                | これで、index.html.erb上で@tweetという変数を利用できるようになりました。findメソッドは引数に指定したidにあたるレコードを1件だけ取得するメソッドでした。
                br
                |  @tweetには、tweetsテーブルのレコード1行が、Tweetクラスのインスタンスとして代入されています。早速、ビューにて@tweetの値を表示させてみましょう。
              h3
                i.icon.pen
                |  index.html.erbを以下のように編集しましょう
              ul.filetree
                li.t-folder
                  |  app
                  ul
                    li.t-folder
                      |  views
                      ul
                        li.t-folder
                          |  tweets
                          ul
                            li.t-file
                              |  index.html.erb
              .code-frame[data-lang="rhtml"]
                .code-lang
                  span.bold
                    | app/views/tweets/index.html.erb
                table.highlighttable
                  tr
                    td.linenos
                      .linenodiv
                        pre
                          | 1 2 3
                    td.code
                      .highlight
                        pre
                          span.hll
                            span.nt
                              | <div
                            span.na
                              | class=
                            span.s
                              | "contents row"
                            span.nt
                              | >
                          span.hll
                            span.nt
                              | <p>
                            span.cp
                              | <%=
                            span.vi
                              | @tweet
                            span.o
                              | .
                            span.n
                              | text
                            span.cp
                              | %>
                            span.nt
                              | </p>
                          span.hll
                            span.nt
                              | </div>
              p
                | こうすることで、localhost:3000/tweetsにアクセスした際、@tweetに代入されているtweetsテーブルのレコードの、textカラムの値が表示されるようになります。
              h3
                i#term_316.icon.information
                |  プロパティ値
              p
                | ここでプロパティ値とは各カラムに保存されている値のことを指します。
              p
                | 編集したindex.html.erbの@tweet.textという記述に注目してください。この記述の@tweetという変数はtweetsテーブルの１つのインスタンスを示しています。その場合、「変数.カラム名」と記述することによって、そのインスタンスのプロパティ値を取り出すことができます。
              p
                | 以下の例を参考にしてみましょう。まずはtweetという変数にtweetモデルのインスタンスを定義します。そして、そのインスタンスに対して「.カラム名」と記述することによって、そのプロパティ値を取り出すことができます。
              p
                img[src="https://qiita-image-store.s3.amazonaws.com/0/40796/cf685396-7eac-fd51-7dc7-ce4fd322cdb7.png" alt="スクリーンショット 2016-01-22 14.44.42.png"]
              p
                | ここでブラウザの表示を確認してみましょう。
              h3
                i.icon.pen
                |  ブラウザで下記のURLにアクセスしましょう
              h4
                a[href="http://localhost:3000/tweets" target="_blank"]
                  | http://localhost:3000/tweets
              p
                img[src="https://tech-master.s3.amazonaws.com/uploads/curriculums/images/Rails1-4/009.png" alt="部分テンプレート"]
              p
                | 表示が確認できましたら、次に複数のtweetの情報を1つのtweetごとに繰り返し順番に表示します。
              h3
                i.icon.happy
                |  参考書参照
              h4
                | 「プロになるためのWeb技術入門」p29 ~, 項2.3, 項2.4, 項2.5
              h2
                | 複数のデータをビューに表示しよう
              h3
                i.icon.pen
                |  tweets_controller.rbを以下のように編集しましょう
              ul.filetree
                li.t-folder
                  |  app
                  ul
                    li.t-folder
                      |  controllers
                      ul
                        li.t-file
                          |  tweets_controller.rb
              .code-frame[data-lang="ruby"]
                .code-lang
                  span.bold
                    | app/controlers/tweets_controller.rb
                table.highlighttable
                  tr
                    td.linenos
                      .linenodiv
                        pre
                          | 1 2 3 4 5 6 7
                    td.code
                      .highlight
                        pre
                          span.k
                            | class
                          span.nc
                            | TweetsController
                          span.o
                            | <
                          span.no
                            | ApplicationController
                          span.k
                            | def
                          span.nf
                            | index
                          span.hll
                            span.vi
                              | @tweets
                            span.o
                              | =
                            span.no
                              | Tweet
                            span.o
                              | .
                            span.n
                              | all
                          span.k
                            | end
                          span.k
                            | end
              p
                curriculum-checkbox[data-id="306"]
              p
                | 上記の編集によってビューにツイートテーブルの全てのレコードがインスタンスの配列として受け渡されました。これからそれらの情報をビューに表示させていきます。
              p
                | その際、Rubyのカリキュラム内で学習したeachメソッドを利用する方法で複数のtweetを表示していきます。
              h3
                i.icon.pen
                |  index.html.erbを以下のように編集しましょう
              ul.filetree
                li.t-folder
                  |  app
                  ul
                    li.t-folder
                      |  views
                      ul
                        li.t-folder
                          |  tweets
                          ul
                            li.t-file
                              |  index.html.erb
              .code-frame[data-lang="rhtml"]
                .code-lang
                  span.bold
                    | app/views/tweets/index.html.erb
                table.highlighttable
                  tr
                    td.linenos
                      .linenodiv
                        pre
                          | 1 2 3 4 5
                    td.code
                      .highlight
                        pre
                          span.nt
                            | <div
                          span.na
                            | class=
                          span.s
                            | "contents row"
                          span.nt
                            | >
                          span.hll
                            span.cp
                              | <%
                            span.vi
                              | @tweets
                            span.o
                              | .
                            span.n
                              | each
                            span.k
                              | do
                            span.o
                              | |
                            span.n
                              | tweet
                            span.o
                              | |
                            span.cp
                              | %>
                          span.hll
                            span.nt
                              | <p>
                            span.cp
                              | <%=
                            span.n
                              | tweet
                            span.o
                              | .
                            span.n
                              | text
                            span.cp
                              | %>
                            span.nt
                              | </p>
                          span.hll
                            span.cp
                              | <%
                            span.k
                              | end
                            span.cp
                              | %>
                          span.nt
                            | </div>
              p
                | このようにすると、eachメソッドの
                code
                  | do
                | と
                code
                  | end
                | で囲まれた
                code
                  | <%= tweet.text %>
                | の部分を、@tweetsのレコードの数だけ繰り返し表示するようになります。
              p
                curriculum-checkbox[data-id="308"]
              h3
                i.icon.pen
                |  ブラウザで下記のURLにアクセスしましょう
              h4
                a[href="http://localhost:3000/tweets" target="_blank"]
                  | http://localhost:3000/tweets
              p
                | ※テストサーバーを立ち上げていない場合にはもう一度「rails s」コマンドでサーバーを起動する必要があります。
              p
                img[src="https://tech-master.s3.amazonaws.com/uploads/curriculums/images/Rails1-4/006.png" alt="サンプルtweets"]
              h1
                | レイアウトを変更する
              p
                | 先ほど作成したビューは装飾がなく素っ気ないものでした。そこで、このビューにHTML、CSSファイルを適用して装飾を加えて見本のPictweetのような見た目にします。
              h2
                | ヘッダー部分を完成させよう
              p
                | まず、Pictweetのヘッダー部分を完成させます。ヘッダー部分は全ページ共通なので、見た目の雛形である
                code
                  | application.html.erb
                | に書きます。
              p
                | ここでは予め見た目を決定するHTMLを書いたファイルを用意しているのでこちらを利用しましょう。
              h3
                i.icon.pen
                |  application.html.erbを以下のリンク先ファイルの内容と置き換えましょう
              h4
                a[href="/filedownload/1" target="_blank"]
                  | application.html.erb
              ul.filetree
                li.t-folder
                  |  app
                  ul
                    li.t-folder
                      |  views
                      ul
                        li.t-folder
                          |  layouts
                          ul
                            li.t-file
                              |  application.html.erb
              p
                curriculum-checkbox[data-id="312"]
              h2
                | 改行を適応させよう
              p
                | デフォルトの状態ではrailsは文字列の改行を読み込まず、改行した状態で文章を表示させることはできません。改行がしっかりと適応されるようにするためにはsimple_formatというメソッドを使う必要があります。
              h3
                i#term_1085.icon.information
                |  simple_format
              p
                | simple_formatメソッドは下記の条件で文字列を加工してくれるメソッドです。今回はこのメソッドを使って改行を反映したツイートをビューに表示にさせます。
              h4
                | ①改行は
                code
                  | <br/>
                | を付与
              h4
                | ②文字列を
                code
                  | <p>
                | で括る
              p
                | 【例】
              .code-frame[data-lang="html"]
                .code-lang
                  span.bold
                    | app/views/test/sample.html.erb
                table.highlighttable
                  tr
                    td.linenos
                      .linenodiv
                        pre
                          | 1
                    td.code
                      .highlight
                        pre
                          span.err
                            | <
                          | %= simple_format(引数) %>
              h3
                i.icon.pen
                |  index.html.erbを以下のように編集しましょう
              .code-frame[data-lang="html"]
                .code-lang
                  span.bold
                    | app/views/tweets/index.html.erb
                table.highlighttable
                  tr
                    td.linenos
                      .linenodiv
                        pre
                          | 1 2 3 4 5 6 7 8
                    td.code
                      .highlight
                        pre
                          span.nt
                            | <div
                          span.na
                            | class=
                          span.s
                            | "contents row"
                          span.nt
                            | >
                          span.err
                            | <
                          | % @tweets.each do |tweet| %>
                          span.hll
                            span.nt
                              | <div
                            span.na
                              | class=
                            span.s
                              | "content_post"
                            span.na
                              | style=
                            span.s
                              | "background-image: url(<%= tweet.image %>);"
                            span.nt
                              | >
                          span.hll
                            span.err
                              | <
                            | %= simple_format(tweet.text) %>
                          span.hll
                            span.nt
                              | <span
                            span.na
                              | class=
                            span.s
                              | "name"
                            span.nt
                              | >
                            span.err
                              | <
                            | %= tweet.name %>
                            span.nt
                              | </span>
                          span.hll
                            span.nt
                              | </div>
                          span.err
                            | <
                          | % end %>
                          span.nt
                            | </div>
              p
                | tweet.textで取得したツイートの本文をsimple_formatによって加工しています。この処理によってツイートの改行が反映されるようになります。
              h3
                i#term_317.icon.information
                |  ヘルパーメソッド
              p
                code
                  | simple_format
                | のように、Railsでは主にviewでHTMLタグを出現させたりテキストを加工するために予めメソッドが用意されています。これらをまとめて、
                strong
                  | ヘルパーメソッド
                | といいます。他には、
                code
                  | form_tag
                | (フォームを出現させるメソッド)や
                code
                  | link_to
                | (aタグを出現させるメソッド)などがあります。
              p
                curriculum-checkbox[data-id="315"]
              h2
                | CSSファイルを適用しましょう
              p
                | HTMLファイルの適用が終わったので、続いてCSSファイルの適用を行なっていきます。
              h3
                i#term_319.icon.information
                |  stylesheet_link_tag
              p
                | CSSファイルの読込みはHTMLのヘッダー部分の
                code
                  | stylesheet_link_tag
                | から読み込まれます。Railsの場合レイアウトファイルがあるので、
                code
                  | application.html.erb
                | にヘッダーの記述があります。
                code
                  | application.html.erb
                | の3行目に注目してください。
              .code-frame[data-lang="rhtml"]
                .code-lang
                  span.bold
                    | app/views/layouts/application.html.erb
                table.highlighttable
                  tr
                    td.linenos
                      .linenodiv
                        pre
                          | 1 2 3 4 5 6
                    td.code
                      .highlight
                        pre
                          span.nt
                            | <head>
                          span.nt
                            | <title>
                          | Pictweet
                          span.nt
                            | </title>
                          span.cp
                            | <%=
                          span.n
                            | stylesheet_link_tag
                          span.s1
                            | 'application'
                          span.p
                            | ,
                          span.ss
                            | media
                          span.p
                            | :
                          span.s1
                            | 'all'
                          span.p
                            | ,
                          span.s1
                            | 'data-turbolinks-track'
                          span.o
                            | =>
                          span.kp
                            | true
                          span.cp
                            | %>
                          span.cp
                            | <%=
                          span.n
                            | javascript_include_tag
                          span.s1
                            | 'application'
                          span.p
                            | ,
                          span.s1
                            | 'data-turbolinks-track'
                          span.o
                            | =>
                          span.kp
                            | true
                          span.cp
                            | %>
                          span.cp
                            | <%=
                          span.n
                            | csrf_meta_tags
                          span.cp
                            | %>
                          span.nt
                            | </head>
              p
                | cssファイルは
                code
                  | app/assets/stylesheets/
                | というディレクトリに配置します。application.html.erbの
                code
                  | stylesheet_link_tag
                | の部分に
                code
                  | application
                | と書いてあるので、このHTMLからはapp/assets/stylesheets/application.cssというCSSファイルを読み込むことを示しています。
              h3
                i#term_320.icon.information
                |  require_tree
              p
                code
                  | application.css
                | の13行目に注目してください。
              ul.filetree
                li.t-folder
                  |  app
                  ul
                    li.t-folder
                      |  assets
                      ul
                        li.t-folder
                          |  stylesheets
                          ul
                            li.t-file
                              |  application.css
              .code-frame[data-lang="ruby"]
                .code-lang
                  span.bold
                    | app/assets/stylesheets/application.css
                table.highlighttable
                  tr
                    td.linenos
                      .linenodiv
                        pre
                          | 1 2 3 4 5 6
                    td.code
                      .highlight
                        pre
                          span.sr
                            | /*
                          span.sr
                            |  ## 中略 ##
                          span.sr
                            |  *
                          span.sr
                            |  *= require_tree .
                          span.sr
                            |  *= require_self
                          span.sr
                            |  */
              p
                | application.cssには、どのcssを読み込むかという設定が書いてあります。
                code
                  | require_tree
                | には引数として与えられたディレクトリ以下のcssファイルをアルファベット順に全て読み込むという意味があります。現在require_treeの引数には.(ドット)が渡されています。
                code
                  | 引数.(ドット)はカレントディレクトリを表します。
                | つまり、この記述によって
                code
                  | app/assets/stylesheets
                | というディレクトリにあるcssファイルは全て読み込まれることになります。
              h3
                i.icon.pen
                |  リンク先のファイルをダウンロードして「style.scss」と「setting.css」を下記のディレクトリに配置しましょう
              p
                i.icon.attention
                | なんどもダウンロードするとファイル名に（１）（２）が付き正しく反映されない可能性があるのでファイル名に注意しましょう。
              h4
                a[href="/filedownload/2" target="_blank"]
                  | style.scss
              h4
                a[href="/filedownload/3" target="_blank"]
                  | setting.css
              p
                img[src="https://tech-master.s3.amazonaws.com/uploads/curriculums//0726c74ee970d2a69f687dc6055b0708.gif" alt="https://tech-master.s3.amazonaws.com/uploads/curriculums//0726c74ee970d2a69f687dc6055b0708.gif"]
              p
                strong
                  | ※ファイルを追加する際には既に存在するファイルは削除しないでください
              ul.filetree
                li.t-folder
                  |  app
                  ul
                    li.t-folder
                      |  assets
                      ul
                        li.t-folder
                          |  stylesheets
                          ul
                            li.t-file
                              |  style.scss
                            li.t-file
                              |  setting.css
